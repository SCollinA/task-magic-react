{"version":3,"sources":["Task.js","Tasks.js","TaskForm.js","TaskInfo.js","UserForm.js","TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","react_default","a","createElement","className","concat","parent","id","onClick","console","log","task","name","selectTask","active","children","map","child","join","deleteTask","time_changed","time_created","completeTask","toString","Tasks","key","parents","TaskForm","onSubmit","editTask","currentTask","value","searchTerm","onChange","type","placeholder","TaskInfo","UserForm","user","logout","login","register","urlPrefix","TaskList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_login","username","password","url","fetch","method","body","JSON","stringify","headers","Content-Type","then","res","json","data","setState","objectSpread","catch","_register","userForm","_logout","_updateSearch","_selectTask","taskToSelect","taskToEdit","_editTask","_updateName","taskToUpdate","state","_completeTask","taskToComplete","_deleteTask","iDToDelete","userTasks","_this2","_this3","taskExists","filter","length","taskName","_this4","event","preventDefault","_addTask","target","nativeEvent","path","includes","Component","App","TaskList_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a5b1335.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Task(props) {\n    return (\n        <div className={`Task ${props.parent}`} id={props.id}>\n            <h1 onClick={() => {\n                console.log(`${props.task.name} selected`)\n                props.selectTask(props.task)\n            }}>\n                {props.task.name}\n                {/* {props.selectedTask && props.selectedTask.id === props.task.id ? props.searchTerm : props.task.name} */}\n            </h1>\n            {\n                props.task.active ? \n            (<div className=\"childNames\">\n                <p>\n                    {props.task.children && props.task.children.map(child => child.name).join(', ')}\n                </p>\n            </div>) :\n            (<button \n                name='deleteTask' \n                onClick={() => props.deleteTask(props.task.id)}\n                >Delete task</button>) \n            }\n            <div className=\"taskTimes\">\n                <h4>{props.task.time_changed}</h4>\n                <h6>{props.task.time_created}</h6>\n            </div>\n            <h4 onClick={() => {\n                console.log(`${props.task.name} changed`)\n                props.completeTask(props.task)\n            }}>{props.task.active.toString()}</h4>\n        </div>\n        )\n}","import React from 'react'\nimport Task from './Task'\n\nexport default function Tasks(props){\n    return (\n        <div className=\"Tasks\">\n            {props.children.map(child => {\n            return (\n            <Task\n            task={child} \n            key={child.id} \n            selectTask={props.selectTask}\n            completeTask={props.completeTask}\n            deleteTask={props.deleteTask} \n            parent={''}\n            />\n            )})}\n            {props.parents.map(parent => {\n            return (\n            <Task\n            task={parent} \n            key={parent.id} \n            selectTask={props.selectTask}\n            completeTask={props.completeTask}\n            deleteTask={props.deleteTask} \n            parent={'parent'}\n            />\n            )})}\n        </div>\n    )\n}","import React from 'react'\n\nexport default function TaskForm(props) {\n    return (\n        <form className=\"TaskForm\" onSubmit={props.onSubmit}>\n            <h1 onClick={() => props.editTask(props.currentTask)}>{props.currentTask ? props.currentTask.name : 'Login -->'}</h1>\n            <input\n                value={props.searchTerm} \n                onChange={props.onChange} \n                type='text'\n                placeholder='Input Task'\n            />\n            <input type='submit' value='add'/>\n        </form>\n    )\n}\n","import React from 'react'\n\nexport default function TaskInfo(props) {\n    return (\n    <div className='TaskInfo'>\n        {props.currentTask ? \n            <ul>\n                <li>Active: {(props.currentTask.active && 'true') || 'false'} </li>\n                <li>Time Changed: {props.currentTask.time_changed}</li>\n                <li>Time Created: {props.currentTask.time_created}</li>\n            </ul>\n            : <div className='TaskInfo'></div>\n        }\n    </div>\n    )\n}","import React from 'react'\n\nexport default function UserForm(props) {\n    const userLogin = props.user ? (\n            <div className=\"UserForm\">\n                {props.user.name}\n                <button onClick={props.logout}>Logout</button>\n            </div>\n    ) : (\n        <form className=\"UserForm\" onSubmit={props.login}>\n            <label name=\"username\">Username:</label>\n            <input type=\"text\" name=\"username\"></input>\n            <label name=\"password\">Password:</label>\n            <input type=\"password\" name=\"password\"></input>\n            <input type=\"submit\" value=\"login\" name=\"login\"/>\n            <input type=\"button\" \n            value=\"register\" \n            name=\"register\"\n            onClick={props.register}/>\n        </form>\n    )\n    return userLogin\n}","import React, {Component} from 'react'\nimport Tasks from './Tasks'\nimport TaskForm from './TaskForm'\nimport TaskInfo from './TaskInfo'\nimport UserForm from './UserForm'\nconst urlPrefix = '/api'\n\nexport default class TaskList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            searchTerm: '',\n            parents: [],\n            currentTask: null,\n            children: [],\n            user: null,\n            userTasks: []\n        }\n    }\n\n    componentDidMount() {\n        fetch(`${urlPrefix}/test-react`)\n        .then(res => res.json())\n        .then(data => this.setState({...data}))\n        // .then(() => this.state.user && this._getAllTasks())\n    }\n\n    _login = (username, password, login) => {\n        const url = login ? `${urlPrefix}/login` : `${urlPrefix}/register`\n        fetch(url, {\n            method: 'post',\n            body: JSON.stringify({username, password}),\n            headers: {'Content-Type': 'application/json'}\n        })\n        .then(res => res.json())\n        .then(data => this.setState({...data}))\n        .catch(console.log)\n        // .then(() => this.state.user && this._getAllTasks())\n    }\n\n    _register = (userForm) => { \n        this._login(userForm.username.value, userForm.password.value, false)\n    }\n\n    _logout = () => {\n        fetch(`${urlPrefix}/logout`)\n        .then(res => res.json())\n        .then(data => this.setState({...data}))\n    }\n\n    _updateSearch = searchTerm => {\n        console.log(`Search Term: ${searchTerm}`)\n        this.setState({\n            searchTerm\n        }, () => console.log('updated search term'))\n    }\n\n    _addTask() {\n        const taskExists = this.state.children.filter(task => task.name === this.state.searchTerm)\n        console.log(taskExists)\n        if (!taskExists.length > 0) {\n            fetch(`${urlPrefix}/test-react`, { \n                method: 'post', \n                body: JSON.stringify({taskName: this.state.searchTerm}),\n                headers: {'Content-Type': 'application/json'}\n            })\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    searchTerm: '',\n                    ...data\n                })\n            })\n        }\n    }\n\n    // _getAllTasks = () => {\n    //     fetch('/test-react-all-tasks')\n    //     .then(res => res.json())\n    //     .then(userTasks => {\n    //         this.setState({\n    //             userTasks\n    //         })\n    //     })\n    // }\n\n    _selectTask = taskToSelect => {\n        // update search box text to task name\n        fetch(`${urlPrefix}/test-react-task`, {\n            method: 'post',\n            body: JSON.stringify({taskToSelect}),\n            headers: {'Content-Type': 'application/json'}\n        })\n        .then(res => res.json())\n        .then(data => {\n            this.setState({\n                ...data,\n                searchTerm: '',\n                taskToEdit: null\n            })\n        })\n    }\n\n    _editTask = taskToEdit => {\n        this.setState({\n            searchTerm: taskToEdit.name,\n            taskToEdit\n        })\n    }\n\n    _updateName = taskToUpdate => {\n        fetch(`${urlPrefix}/test-react-name`, {\n            method: 'post',\n            body: JSON.stringify({taskToUpdate, name: this.state.searchTerm}),\n            headers: {'Content-Type': 'application/json'}\n        })\n        .then(res => res.json())\n        .then(data => {\n            this.setState({\n                searchTerm: '',\n                taskToEdit: null,\n                ...data\n            })\n        })\n    }\n\n    _completeTask = taskToComplete => {\n        fetch(`${urlPrefix}/test-react-complete`, {\n            method: 'post',\n            body: JSON.stringify(taskToComplete),\n            headers: {'Content-Type': 'application/json'}\n        })\n        .then(res => res.json())\n        .then(data => {\n            this.setState({...data})\n        })\n    }\n\n    _deleteTask = iDToDelete => {\n        fetch(`${urlPrefix}/test-react-delete`, {\n            method: 'post', \n            body: JSON.stringify({iDToDelete}),\n            headers: {'Content-Type': 'application/json'}\n        })\n        .then(res => res.json())\n        .then(data => {\n            this.setState({...data})\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"TaskList\">\n                <div className=\"header\">\n                    <TaskForm searchTerm={this.state.searchTerm} \n                    onSubmit={event => {\n                        event.preventDefault()\n                        this.state.taskToEdit ? this._updateName(this.state.taskToEdit) : this._addTask()\n                    }} \n                    editTask={this._editTask}\n                    onChange={event => this._updateSearch(event.target.value)}\n                    currentTask={this.state.currentTask} \n                    />\n                    <TaskInfo currentTask={this.state.currentTask}/>\n                    <UserForm user={this.state.user} \n                    login={event => {\n                        event.preventDefault()\n                        this._login(event.target.username.value, event.target.password.value, true)\n                    }}\n                    register={event => {\n                        this._register(event.nativeEvent.path[1])\n                    }}\n                    logout={() => {\n                        this._logout()\n                    }\n                    }/>\n                </div>\n                <Tasks children={this.state.searchTerm ? this.state.userTasks.filter(task => task.name.includes(this.state.searchTerm)) : this.state.children}\n                parents={this.state.searchTerm ? [] : this.state.parents}\n                selectTask={this._selectTask}\n                completeTask={this._completeTask}\n                deleteTask={this._deleteTask}\n                />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport TodoList from './TaskList'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}